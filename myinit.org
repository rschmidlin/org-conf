* Use package

  Make use-package calls shorter by automatically ensuring each call (i.e. install package). Also
  sets standard to melpa (alghough it is by default).

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
(setq use-package-always-pin "melpa")
  (use-package delight
	:ensure t
	:pin gnu)
#+END_SRC

* Operating system
#+BEGIN_SRC emacs-lisp
  ;; Configure Emacs to use find and grep from MSYS
  (when (eq system-type 'windows-nt)
    (setenv "PATH"
	    (concat
	     ;; Change this with your path to MSYS bin directory
	     "C:\\msys64\\usr\\bin;"
	     "C:\\msys64\\mingw64\\bin;"
	     "/usr/local/bin:"
	     (getenv "PATH")))
    (setq ispell-program-name "C:\\msys64\\usr\\bin\\aspell.exe"))
#+END_SRC
* Commands completion

#+BEGIN_SRC emacs-lisp
  ;; Use which-key
  (use-package which-key
	:config
	(which-key-mode))

  ;; Helping IVY with Flx
  (use-package flx)

  ;; Include smex to sort recent commands first in counsel
  (use-package smex)

  ;; Use IVY
  (use-package counsel
    :load-path "swiper"
    :pin manual
    :init
    (require 'smex)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq projectile-completion-system 'ivy)
    (setq ivy-re-builders-alist
	  '((ivy-switch-buffer . ivy--regex-plus)
	    (swiper . ivy--regex-plus)
	    (counsel-M-x . ivy--regex-plus)
	    (projectile-find-file . ivy--regex-plus)
	    (projectile-find-dir . ivy--regex-plus)
	    (projectile-switch-project . ivy--regex-plus)
	    (t . ivy--regex-fuzzy)))
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-ignore-buffers '("\\` " "\\`\\*"))
    (setq magit-completing-read-function 'ivy-completing-read)
    (setq projectile-completion-system 'ivy)
    :config
    (ivy-mode 1))
#+END_SRC
* Navigation
#+BEGIN_SRC emacs-lisp
  (use-package deadgrep)
  (use-package dumb-jump)
#+END_SRC

** Complete searchs with symbol under point and rebind history keybindings

 #+BEGIN_SRC emacs-lisp
   (delete-selection-mode 1)

   (defvar auto-insert-search-or-replace-commands
     '(query-replace query-replace-regexp swiper grep-find)
     "Commands to automatically insert selected \"symbol-at-point\".")

   (defvar auto-insert-search-or-replace-command-strings (mapcar #'symbol-name auto-insert-search-or-replace-commands)
     "String of commands to automatically insert selected \"symbol-at-point\".")

   (defun auto-insert-search-or-replace-insert-symbol-at-point-hook ()
     "Insert symbol at point and select it to be immediately substitutable by the user."
     (when (and (symbolp this-command) (memq (symbol-name this-command) auto-insert-search-or-replace-command-strings))
       (auto-insert-search-or-replace-insert-symbol-at-point-to-minibuffer)))

   (defun auto-insert-search-or-replace-insert-symbol-at-point-to-minibuffer ()
     "Get word at point in original buffer and insert it to minibuffer."
     (interactive)
     (let ((symbol nil))
       (with-current-buffer (window-buffer (minibuffer-selected-window))
	 (setq symbol (thing-at-point 'symbol t)))
       (insert-and-select symbol)))

   (defun insert-and-select (text)
   "Insert TEXT and selects it."
   (when text
     (let ((begin (point)))
       (insert text)
       (set-mark begin)
       (setq deactivate-mark nil))))

   (add-hook 'minibuffer-setup-hook 'auto-insert-search-or-replace-insert-symbol-at-point-hook)

 #+END_SRC
* Text correction and completion
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

  (use-package flyspell-correct-ivy
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))

  (setq ispell-extra-args '("--sug-mode=ultra"))

  (use-package flycheck
    :config (global-flycheck-mode))

  ;; Enable text completion
  (use-package company
	:init
	(add-hook 'after-init-hook 'global-company-mode)
	(setq-default company-dabbrev-other-buffers 'all
				  company-tooltip-align-annotations t))

  (use-package company-quickhelp
	:init
	(add-hook 'after-init-hook 'company-quickhelp-mode))
#+END_SRC
* Editing utilities
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :pin gnu
    :config
    (global-undo-tree-mode 1))

  (use-package browse-kill-ring)

  (use-package visual-regexp
    :config
    (require 'visual-regexp))

  (use-package expand-region
    :config
    (require 'expand-region))

  (use-package goto-line-preview)

  (use-package drag-stuff
    :init
    (drag-stuff-global-mode 1))

  (use-package string-inflection
    :config
    (require 'string-inflection))

  (use-package crux)

  (use-package multiple-cursors)

  (customize-set-variable 'mouse-drag-and-drop-region t)
#+END_SRC
* Projects
#+BEGIN_SRC emacs-lisp
  ;; Keybinding for using MaGit
  (use-package magit)

  ;; Projectile to access project files
  (use-package projectile
	:config
	(projectile-mode +1))
#+END_SRC
* Major modes
** Fundamental mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'fundamental-mode (lambda() (electric-indent-mode -1)))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; Do not show bold, italic and underlined markers
  (setq org-hide-emphasis-markers t)

  (use-package htmlize)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)))

  (custom-set-variables
   '(org-directory "~/Nextcloud/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org")))

  (setq org-agenda-files (list org-default-notes-file))

  (setq
   org-capture-templates
   '(
	 ("t" "To Do Item" entry (file+headline "" "To Do and Notes") "* TODO %?\n%u" :prepend t)
	 ("n" "Note" entry (file+headline "" "Notes") "* %u %? " :prepend t)
	 ("p" "Personal development" entry (file+headline "" "Personal development") "* TODO %? \n%T" :prepend t)
	 ("s" "Team forming" entry (file+headline "" "Team forming") "* TODO %? \n%T" :prepend t)
	 ("d" "Project development" entry (file+headline "" "Project development") "* TODO %? \n%T" :prepend t)
	 ("i" "Improvements" entry (file+headline "" "Improvements") "* TODO %? \n%T" :prepend t)
	 ("e" "Emacs adaptation" entry (file+headline "" "Emacs adaptation")  "* TODO %? \n%T" :prepend t)))
#+END_SRC
* Text format - enforce and visualize
#+BEGIN_SRC emacs-lisp
  ;; Word wrap without fringe (the arrows) and without changing the file
  (global-visual-line-mode 1)

  (use-package aggressive-indent
    :init
    (setq-default fill-column 100)
    :config
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'fundamental-mode))

  (defun refill-paragraphs-to-be-one-line ()
    "fill individual paragraphs with large fill column"
    (interactive)
    (let ((fill-column 100000))
      (fill-individual-paragraphs (point-min) (point-max))))

  (use-package aggressive-fill-paragraph
    :config
    (afp-setup-recommended-hooks)
    (add-to-list 'afp-fill-comments-only-mode-list 'python-mode))

  ;; Show trailing white spaces
  (setq-default show-trailing-whitespace t)
  (add-hook 'mu4e-view-mode-hook (lambda() (setq show-trailing-whitespace nil)))

  ;; Remove useless whitespace before saving a file
  (add-hook 'before-save-hook 'whitespace-cleanup)
  (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))

  ;; Show visual markings about indentation
  (use-package highlight-indent-guides
    :init
    (setq highlight-indent-guides-method 'character)
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

  ;; Mark horizontal line where cursor is
  (global-hl-line-mode 1)
  (set-face-background hl-line-face "grey95")

  ;; Mark all words under cursor in current viewport of buffer
  (use-package symbol-overlay
    :config
    (dolist (hook '(prog-mode-hook html-mode-hook css-mode-hook yaml-mode-hook conf-mode-hook))
      (add-hook hook 'symbol-overlay-mode)))

  (use-package smartparens
    :config
    ;; Fix single-quotes being automatically ended on lisp
    (require 'smartparens-config)
    (smartparens-global-mode))
#+END_SRC
* Deal with locale
#+BEGIN_SRC emacs-lisp
  (defun insert-commercial-at()
	"Insert a commercial at before point."
	(interactive)
	(insert "@"))

  (defun insert-tilde()
	"Insert a tilde before point."
	(interactive)
	(insert "~"))

  (defun insert-left-curly-brace()
	"Insert a left curly brace before point."
	(interactive)
	(insert "{"))

  (defun insert-right-curly-brace()
	"Insert a right curly brace before point."
	(interactive)
	(insert "}"))

  (defun insert-left-squared-bracket()
	"Insert a left square bracket before point."
	(interactive)
	(insert "["))

  (defun insert-right-squared-bracket()
	"Insert a right square bracket before point."
	(interactive)
	(insert "]"))

  (defun insert-backslash()
	"Insert a backslash before point."
	(interactive)
	(insert "\\"))

  (defun insert-pipe()
    "Insert a pipe before point."
    (interactive)
    (insert "|"))

  (defun insert-ae()
    (interactive)
    (insert "ä"))

  (defun insert-AE()
    (interactive)
    (insert "Ä"))

  (defun insert-oe()
    (interactive)
    (insert "ö"))

  (defun insert-OE()
    (interactive)
    (insert "Ö"))

  (defun insert-ue()
    (interactive)
    (insert "ü"))

  (defun insert-UE()
    (interactive)
    (insert "Ü"))

  (defun insert-scharfes-s()
    (interactive)
    (insert "ß"))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (defvar ergoemacs-light-mode-map (make-sparse-keymap))

  ;; (global-set-key (kbd "C-M-q") 'insert-commercial-at)
  ;; (global-set-key (kbd "C-M-+") 'insert-tilde)
  ;; (global-set-key (kbd "C-M-7") 'insert-left-curly-brace)
  ;; (global-set-key (kbd "C-M-8") 'insert-left-squared-bracket)
  ;; (global-set-key (kbd "C-M-9") 'insert-right-squared-bracket)
  ;; (global-set-key (kbd "C-M-0") 'insert-right-curly-brace)
  ;; (global-set-key (kbd "C-M-ß") 'insert-backslash)
  ;; (global-set-key (kbd "C-M-<") 'insert-pipe)

  (global-set-key (kbd "s-[") 'insert-ue)
  (global-set-key (kbd "s-{") 'insert-UE)
  (global-set-key (kbd "s-;") 'insert-oe)
  (global-set-key (kbd "s-:") 'insert-OE)
  (global-set-key (kbd "s-'") 'insert-ae)
  (global-set-key (kbd "s-\"") 'insert-AE)
  (global-set-key (kbd "s--") 'insert-scharfes-s)

  ;; Movement command
  (define-key ergoemacs-light-mode-map (kbd "M-o") 'forward-word)
  (define-key ergoemacs-light-mode-map (kbd "M-u") 'backward-word)
  (define-key ergoemacs-light-mode-map (kbd "M-l") 'forward-char)
  (define-key ergoemacs-light-mode-map (kbd "M-j") 'backward-char)
  (define-key ergoemacs-light-mode-map (kbd "M-i") 'previous-line)
  (define-key ergoemacs-light-mode-map (kbd "M-k") 'next-line)

  ;; Adapt movement commands to use syntax information
  (define-key ergoemacs-light-mode-map (kbd "M-O") 'forward-sexp)
  (define-key ergoemacs-light-mode-map (kbd "M-U") 'backward-sexp)

  ;; Additional movement commands
  (define-key ergoemacs-light-mode-map (kbd "M-I") 'scroll-down)
  (define-key ergoemacs-light-mode-map (kbd "M-K") 'scroll-up)
  (define-key ergoemacs-light-mode-map (kbd "M-H") 'end-of-line)
  (define-key ergoemacs-light-mode-map (kbd "M-h") 'crux-move-beginning-of-line)
  (define-key ergoemacs-light-mode-map (kbd "M-n") 'beginning-of-buffer)
  (define-key ergoemacs-light-mode-map (kbd "M-N") 'end-of-buffer)

  ;; Editing commands
  (define-key ergoemacs-light-mode-map (kbd "M-e") 'backward-kill-word)
  (define-key ergoemacs-light-mode-map (kbd "M-r") 'kill-word)
  (define-key ergoemacs-light-mode-map (kbd "M-f") 'delete-char)
  (define-key ergoemacs-light-mode-map (kbd "M-d") 'delete-backward-char)
  (define-key ergoemacs-light-mode-map (kbd "M-g") 'kill-visual-line)
  (define-key ergoemacs-light-mode-map (kbd "M-G") (lambda ()
						     (interactive)
						     (kill-visual-line -1)))
  (define-key ergoemacs-light-mode-map (kbd "M-'") (lambda (arg)
						     (interactive "p")
						     (if (region-active-p)
							 (comment-dwim nil)
						       (comment-line arg))))
  (define-key ergoemacs-light-mode-map (kbd "M-w") 'just-one-space)
  (define-key ergoemacs-light-mode-map (kbd "M-/") 'string-inflection-all-cycle)
  (define-key ergoemacs-light-mode-map (kbd "M-?") 'string-inflection-all-cycle)
  (define-key ergoemacs-light-mode-map (kbd "<C-return>") 'crux-smart-open-line)
  (define-key ergoemacs-light-mode-map (kbd "<C-S-return>") 'crux-smart-open-line-above)
  (define-key ergoemacs-light-mode-map (kbd "<M-return>") (lambda (arg)
							    (interactive "P")
							    (if (eq major-mode 'org-mode)
								(org-meta-return arg)
							      (crux-smart-open-line arg))))
  (define-key ergoemacs-light-mode-map (kbd "<M-S-return>") (lambda (arg)
							      (interactive "P")
							      (if (eq major-mode 'org-mode)
								  (org-insert-todo-heading arg)
								(crux-smart-open-line-above))))
  (define-key ergoemacs-light-mode-map (kbd "M-F") 'crux-top-join-line)
  (define-key ergoemacs-light-mode-map (kbd "M-5") 'vr/query-replace)
  (define-key ergoemacs-light-mode-map (kbd "M-%") 'dired-do-query-replace-regexp)
  (define-key ergoemacs-light-mode-map (kbd "C-a") 'mark-whole-buffer)

  ;; Buffer navigation
  (define-key ergoemacs-light-mode-map (kbd "C-c f") 'isearch-forward)
  (define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
  (define-key isearch-mode-map (kbd "<f3>") 'isearch-repeat-forward)
  (define-key isearch-mode-map (kbd "S-<f3>") 'isearch-repeat-backward)
  (define-key ergoemacs-light-mode-map (kbd "s-f") 'swiper)
  (define-key ergoemacs-light-mode-map (kbd "C-l") 'goto-line-preview)
  (define-key ergoemacs-light-mode-map (kbd "M-p") 'recenter-top-bottom)
  (defun xah-new-empty-buffer ()
    "Create a new empty buffer.
       New buffer will be named untitled or untitled<2>,
       untitled<3>, etc.
       URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
       Version 2016-12-27"
    (interactive)
    (let (($buf (generate-new-buffer "untitled")))
      (switch-to-buffer $buf)
      (funcall initial-major-mode)
      (setq buffer-offer-save t)))
  ;; (define-key ergoemacs-light-mode-map (kbd "C-n") 'xah-new-empty-buffer)
  (define-key ergoemacs-light-mode-map (kbd "C-c o") 'crux-open-with)

  ;; Control UI
  (define-key ergoemacs-light-mode-map (kbd "C--") 'text-scale-adjust)
  (define-key ergoemacs-light-mode-map (kbd "C-+") 'text-scale-adjust)
  (define-key ergoemacs-light-mode-map (kbd "C-=") 'text-scale-adjust)
  (define-key ergoemacs-light-mode-map (kbd "C-S-n") 'make-frame)
  (define-key ergoemacs-light-mode-map (kbd "C-S-w") 'delete-frame)

  ;; Copy, paste
  (defun ergoemacs-light-kill-line-or-region ()
    (interactive)
    (if (region-active-p)
	(kill-region (mark) (point))
      (progn
	(beginning-of-line)
	(kill-visual-line 1))))

  (define-key ergoemacs-light-mode-map (kbd "M-x") 'ergoemacs-light-kill-line-or-region)
  (define-key ergoemacs-light-mode-map (kbd "M-c") (lambda ()
						     (interactive)
						     (ergoemacs-light-kill-line-or-region)
						     (yank)))
  (define-key ergoemacs-light-mode-map (kbd "M-C") (lambda ()
						     (interactive)
						     (if (region-active-p)
							 (kill-ring-save (mark) (point))
						       (save-excursion
							 (end-of-line)
							 (push-mark)
							 (beginning-of-line)
							 (kill-ring-save (point) (mark))))))
  (define-key ergoemacs-light-mode-map (kbd "M-v") 'yank)
  (define-key ergoemacs-light-mode-map (kbd "M-V") 'browse-kill-ring)
  (define-key ergoemacs-light-mode-map (kbd "M-SPC") 'set-mark-command)
  (define-key ergoemacs-light-mode-map (kbd "M-8") (lambda ()
						     (interactive)
						     (if (region-active-p)
							 (er/expand-region 1)
						       (er/mark-symbol))))

  ;; Undo commands Ensure that we are using undo-tree-undo otherwise we can't redo

  ;; Newer versions of undo-tree do not enable if undo is remapped

  ;; (global-set-key [remap undo] 'undo-tree-undo)
  (define-key ergoemacs-light-mode-map (kbd "C-z") 'undo-tree-undo)
  (define-key ergoemacs-light-mode-map (kbd "C-y") 'undo-tree-redo)
  (define-key ergoemacs-light-mode-map (kbd "C-S-z") 'undo-tree-redo)

  (define-key ergoemacs-light-mode-map (kbd "M-z") 'undo-tree-undo)
  (define-key ergoemacs-light-mode-map (kbd "M-Z") 'undo-tree-redo)
  (define-key ergoemacs-light-mode-map (kbd "C-S-Z") 'undo-tree-visualize)

  ;; File open, save
  (define-key ergoemacs-light-mode-map (kbd "C-s") 'save-buffer)
  (define-key ergoemacs-light-mode-map (kbd "C-o") 'counsel-find-file)

  ;; Windows
  (define-key ergoemacs-light-mode-map (kbd "M-4") 'split-window-below)
  (define-key ergoemacs-light-mode-map (kbd "M-$") 'split-window-right)
  (define-key ergoemacs-light-mode-map (kbd "M-3") 'delete-other-windows)
  (define-key ergoemacs-light-mode-map (kbd "M-2") 'delete-window)
  (define-key ergoemacs-light-mode-map (kbd "M-s") 'other-window)

  ;; Find files
  (define-key ergoemacs-light-mode-map (kbd "M-;") 'ivy-switch-buffer)
  (define-key ergoemacs-light-mode-map (kbd "M-:") 'ibuffer)
  (define-key ergoemacs-light-mode-map (kbd "C-;") 'counsel-bookmark)
  (define-key ergoemacs-light-mode-map (kbd "C-:") 'bookmark-bmenu-list)

  ;; Find symbol
  (define-key ergoemacs-light-mode-map (kbd "C-S-o") 'imenu)
  (define-key ergoemacs-light-mode-map (kbd "s-F") 'grep-find)
  (define-key ergoemacs-light-mode-map (kbd "C-S-f") 'deadgrep)
  (define-key ergoemacs-light-mode-map (kbd "M-a") 'counsel-M-x)

  ;; Multiple cursors
  (global-unset-key (kbd "M-<down-mouse-1>"))
  (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
  (defun mark-and-multiple-select (arg)
    (interactive "p")
    (if (region-active-p)
	(mc/mark-next-like-this arg))
    (er/mark-symbol))
  (global-set-key (kbd "C-d") 'mark-and-multiple-select)
  ;; (global-set-key (kbd "C-d") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-S-l") (lambda()
				  (interactive)
				  (er/mark-symbol)
				  (mc/mark-all-like-this)))

  (global-set-key (kbd "M-Q") 'refill-paragraphs-to-be-one-line)

  (global-set-key (kbd "<f8>") 'subword-mode)
  (global-set-key (kbd "<f10>") 'visual-line-mode)
  ;;(global-set-key (kbd "M-%") 'vr/query-replace)

  (global-set-key (kbd "M-<up>") 'drag-stuff-up)
  (global-set-key (kbd "M-<down>") 'drag-stuff-down)
  (global-set-key (kbd "M-S-<right>") 'drag-stuff-right)
  (global-set-key (kbd "M-S-<left>") 'drag-stuff-left)

  (global-set-key (kbd "C-SPC") 'company-complete)

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c t") 'org-edit-src-exit)

  (global-set-key (kbd "M-<f12>") 'xref-peek-definitions)
  (global-set-key (kbd "<f12>") 'raul-find-definitions)
  (global-set-key (kbd "S-<f12>") 'raul-find-references)
  (global-set-key (kbd "M-<left>") 'raul-navigate-backward)
  (global-set-key (kbd "M-<right>") 'raul-navigate-forward)

  (define-key minibuffer-local-map (kbd "M-I") 'previous-history-element)
  (define-key minibuffer-local-map (kbd "M-K") 'next-history-element)
  (define-key vr/minibuffer-keymap (kbd "M-I") 'previous-history-element)
  (define-key vr/minibuffer-keymap (kbd "M-K") 'next-history-element)
  (define-key ivy-minibuffer-map (kbd "M-I") 'ivy-previous-history-element)
  (define-key ivy-minibuffer-map (kbd "M-K") 'ivy-next-history-element)
  (define-key isearch-mode-map (kbd "M-I") 'isearch-ring-retreat)
  (define-key isearch-mode-map (kbd "M-K") 'isearch-ring-advance)


  (when (featurep 'company)
    (define-key company-active-map (kbd "M-K") 'company-select-next)
    (define-key company-active-map (kbd "M-I") 'company-select-previous)
    (define-key company-active-map (kbd "C-f") 'company-search-candidates)
    ;; Company-cancel only works once (define-key company-active-map (kbd "<escape>") 'company-cancel)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle))

  (when (featurep 'org)
    (define-key org-mode-map (kbd "C-c t") 'org-edit-special))

  (eval-after-load "elisp-mode" '(define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-buffer))
  (eval-after-load "python" '(define-key python-mode-map (kbd "C-c C-c") 'raul-send-buffer-to-python))

  (eval-after-load "cc-mode" '(define-key c-mode-map (kbd "C-c C-c")
				'compile))
  (eval-after-load "cc-mode" '(define-key c++-mode-map (kbd "C-c C-c")
				'compile))

  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-S-p") 'projectile-find-dir)
  (global-set-key (kbd "C-p") 'projectile-find-file)
  (global-set-key (kbd "M-P") 'projectile-switch-project)
  (global-set-key (kbd "C-M-p") 'projectile-invalidate-cache)
  (global-set-key (kbd "C-b") 'sr-speedbar-toggle)

  (define-key ergoemacs-light-mode-map (kbd "C-'") 'flyspell-correct-wrapper)

  (global-set-key (kbd "<f11>") (lambda()
				  (interactive)
				  (if (bound-and-true-p aggressive-indent-mode)
				      (progn
					(aggressive-indent-mode -1)
					(message "Aggressive indent mode deactivated"))
				    (progn
				      (aggressive-indent-mode 1)
				      (message "Aggressive indent mode activated")))))
  (global-set-key [remap goto-line] 'goto-line-preview)
  (global-set-key (kbd "<f9>") 'aggressive-fill-paragraph-mode)
  (global-set-key (kbd "C-t") (lambda ()
				(interactive)
				(elscreen-create)
				(xah-new-empty-buffer)))
  (global-set-key (kbd "<C-next>") 'elscreen-next)
  (global-set-key (kbd "<C-prior>") 'elscreen-previous)
  (global-set-key (kbd "C-w") 'elscreen-kill)

  (define-minor-mode ergoemacs-light-mode
    "Minor mode using a minimal subset of ErgoEmacs keybindings"
    :init-value t
    :lighter ergoemacs-light-mode " elm"
    :keymap ergoemacs-light-mode-map)

  (ergoemacs-light-mode t)

  ;; Dokey for isearch
  (add-to-list 'load-path "~/.emacs.d/emacs-dokey")
  (require 'dokey)
  (global-set-key (kbd "C-f") (dokey "M-8 M-C C-c f C-y"))
#+END_SRC
* Buffer configuration
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (global-subword-mode t)

  ;; Return to previous window configuration with C-<
  (winner-mode 1)

  ;; Popwin takes care that helper buffers do not take much space
  (use-package popwin
	:init
	(require 'popwin)
	(popwin-mode 1))

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (show-paren-mode 1)

  (setq-default indent-tabs-mode t)
  (setq x-select-enable-clipboard t
		x-select-enable-primary t
		save-interprogram-paste-before-kill t
		apropos-do-all t
		mouse-yank-at-point t
		require-final-newline t
		visible-bell t
		load-prefer-newer t
		ediff-window-setup-function 'ediff-setup-windows-plain
		save-place-file (concat user-emacs-directory "places")
		backup-directory-alist `(("." . ,(concat user-emacs-directory
												 "backups"))))

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default ediff-ignore-similar-regions t)
  (setq-default ediff-highlight-all-diffs nil)
#+END_SRC
* UI configuration
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)

  (column-number-mode t)

  (if (version<= "26.3" emacs-version)
      (global-display-line-numbers-mode)
    (global-linum-mode t))

  (if (version<= "27.0.50" emacs-version)
	  (progn
		(global-tab-line-mode))
	(use-package elscreen
	  :config
	  (elscreen-start)))

  (add-to-list 'default-frame-alist (cons 'width 100))
  (add-to-list 'default-frame-alist (cons 'height 40))

  ;; (if (version<= "26.3" emacs-version)
  ;;     (progn
  ;;       (pixel-scroll-mode)
  ;;       (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour.
  ;;       (setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels).
  ;;       (setq mouse-wheel-scroll-amount '(3)) ; Distance in pixel-resolution to scroll each mouse wheel event.
  ;;       (setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast
  ;;       (setq fast-but-imprecise-scrolling t) ; No (less) lag while scrolling lots.
  ;;       (setq jit-lock-defer-time 0)) ; Just don't even fontify if we're still catching up on user input.
  ;;   (use-package sublimity
  ;;     :init
  ;;     (setq scroll-preserve-screen-position t) ;; otherwise scroll gets disturbed by point not moving
  ;;     :config
  ;;     (sublimity-mode)
  ;;     (require 'sublimity-scroll)))
#+END_SRC

** Better defaults

  Copying better default inputs, disable toolbar, scrollbar, ease yes-or-no questions.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
  (when (fboundp 'tool-bar-mode)
	(tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
	(scroll-bar-mode -1))
#+END_SRC

** Themes

   Themes make Emacs respond slower hence disabled.

#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :config
  ;;   (powerline-default-theme))

  ;; (add-to-list 'default-frame-alist '(font . "Source Code Pro-11"))
  ;; (set-face-attribute 'default t :font "Source Code Pro-11")

  ;; (load-theme 'leuven t)
#+END_SRC
* Programming

** Programming languages
*** Emacs lisp
#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
	:config
	(require 'elisp-slime-nav)
	(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
	  (add-hook hook 'elisp-slime-nav-mode)))
#+END_SRC

*** C language
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "k&r"
		c-basic-offset 4
		default-tab-width 4
		ident-tabs-mode t)

  ;; Enable CMake major mode
  (use-package cmake-mode)

  (use-package cmake-font-lock
	:init
	(add-hook 'cmake-mode-hook 'cmake-font-lock-activate))
#+END_SRC

*** Python mode
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :init
    (add-hook 'python-mode-hook (lambda()
				  (add-to-list 'company-backends 'company-jedi)
				  (jedi:setup))))

  (defun raul-send-buffer-to-python ()
    "Send complete buffer to Python"
    (interactive)
    (python-shell-send-buffer t))

  (defun python-send-buffer-with-my-args (args)
    (interactive "sPython arguments: ")
    (let ((source-buffer (current-buffer)))
      (with-temp-buffer
	(insert "import sys; sys.argv = '''" args "'''.split()\n")
	(insert-buffer-substring source-buffer)
	(raul-send-buffer-to-python))))

  (when (eq system-type 'gnu/linux)
    (setq python-shell-interpreter "/usr/bin/python3"))

  (if (eq system-type 'gnu/linux)
      (setq python-shell-interpreter "ipython3")
    (setq python-shell-interpreter "ipython"))

  (setq python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

*** Groovy

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode)
#+END_SRC

*** Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
	:ensure t
	:config
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	(setq web-mode-engines-alist
		  '(("django"    . "\\.html\\'")))
	(setq web-mode-ac-sources-alist
		  '(("css" . (ac-source-css-property))
			("vue" . (ac-source-words-in-buffer ac-source-abbrev))
			("html" . (ac-source-words-in-buffer ac-source-abbrev))))
	(setq web-mode-enable-auto-closing t))
  (setq web-mode-enable-auto-quoting t)
#+END_SRC
** Programming enhancement

#+BEGIN_SRC emacs-lisp
  ;; (use-package yasnippet
  ;;       :config
  ;;       (yas-reload-all)
  ;;       (add-hook 'prog-mode-hook #'yas-minor-mode))

  ;; (use-package yasnippet-snippets)
#+END_SRC
* Indexer build functions
#+BEGIN_SRC emacs-lisp
  (defun raul-find-definitions ()
    (interactive)
    (cond
     ((eq major-mode 'python-mode) (jedi:goto-definition))
     ((eq major-mode 'c++-mode)
      (if (dumb-jump-rg-installed?)
	  (dumb-jump-go)
	(ggtags-find-tag-dwim (ggtags-read-tag 'definition current-prefix-arg))))
     ((eq major-mode 'c-mode)
      (if (dumb-jump-rg-installed?)
	  (dumb-jump-go)
	(ggtags-find-tag-dwim (ggtags-read-tag 'definition current-prefix-arg))))
     ((eq major-mode 'emacs-lisp-mode)
      (xref-find-definitions (xref--read-identifier "Find definitions of: ")))
     (t
      (if (dumb-jump-rg-installed?)
	  (dumb-jump-go)
	(xref-find-definitions (xref--read-identifier "Find definitions of: "))))))

  (defun raul-find-references ()
    (interactive)
    (cond
     ((eq major-mode 'python-mode) (message "Not supported in Jedi"))
     ((eq major-mode 'c++-mode) (ggtags-find-reference (ggtags-read-tag 'reference current-prefix-arg)))
     ((eq major-mode 'c-mode) (ggtags-find-reference (ggtags-read-tag 'reference current-prefix-arg)))
     (t (xref-find-references (xref--read-identifier "Find references of: ")))))

  (defun raul-navigate-backward ()
    (interactive)
    (cond
     ((eq major-mode 'python-mode) (jedi:goto-definition-pop-marker))
     ((eq major-mode 'c++-mode)
      (if (dumb-jump-rg-installed?)
	  (dumb-jump-back)
	(ggtags-prev-mark)))
     ((eq major-mode 'c-mode)
      (if (dumb-jump-rg-installed?)
	  (dumb-jump-back)
	(ggtags-prev-mark)))
     ((eq major-mode 'emacs-lisp-mode)
      (xref-pop-marker-stack))
     (t (if (dumb-jump-rg-installed?)
	    (dumb-jump-back)
	  (xref-pop-marker-stack)))))

  (defun raul-navigate-forward ()
    (interactive)
    (cond
     ((eq major-mode 'python-mode) (message "Not supported in Jedi"))
     ((eq major-mode 'c++-mode) (ggtags-next-mark))
     ((eq major-mode 'c-mode) (ggtags-next-mark))
     (t nil)))

  (use-package ggtags
    :config
    (add-hook 'c-mode-common-hook
	      (lambda ()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		  (ggtags-mode 1)))))
#+END_SRC

** Building tag files

#+BEGIN_SRC emacs-lisp
  ;; Generate cscope.files from a directory list
  (defun build-cscope-file (directories &optional target-directory)
	"Generate cscope.file for a list of DIRECTORIES, optionally in TARGET-DIRECTORY."
	(let
		(
		 (file (if target-directory
				   (concat target-directory "/cscope.files")
				 "cscope.files"))
		 )
	  (shell-command (concat "rm -rf " file))
	  (let ((command ""))
		(dolist (dir directories)
		  (setq command "")
		  (setq command (concat command "find " dir " -name *.cpp >> " file " && "))
		  (setq command (concat command "find " dir " -name *.hpp >> " file " && "))
		  (setq command (concat command "find " dir " -name *.tpp >> " file " && "))
		  (setq command (concat command "find " dir " -name *.c >> " file " && "))
		  (setq command (concat command "find " dir " -name *.h >> " file " && "))
		  (setq command (substring command 0 -4))
		  (shell-command command))))
	(message "cscope file generated"))

  ;; Functions to create Ctags and Cscope files
  (defun build-ctags-from-list (filename &optional target-directory)
	(interactive "f")
	(if target-directory
		(call-process path-to-ctags nil (get-buffer-create "process-output") t "-e" "--extra=+fq" "-L" filename "-f" (concat target-directory "/TAGS"))
	  (call-process path-to-ctags nil (get-buffer-create "process-output") t "-e" "--extra=+fq" "-L" filename)))

  (defun build-cscope-from-list (filename &optional target-directory)
	(interactive "f")
	(if target-directory
		(let ((default-directory target-directory))
		  (call-process "cscope" nil (get-buffer-create "process-output") t "-U" "-b" "-i" filename))
	  (call-process "cscope" nil (get-buffer-create "process-output") t "-U" "-b" "-i" filename))
	(message (concat "Cscope file built successfully for " filename)))

  (defun build-gtags-from-list (filename &optional target-directory)
	(interactive "f")
	(if target-directory
		(let ((default-directory target-directory))
		  (call-process "gtags" nil (get-buffer-create "process-output") t "-f" filename))
	  (call-process "gtags" nil (get-buffer-create "process-output") t "-f" filename))
	(message (concat "GNU Global tags built successfully for " filename)))
#+END_SRC
* Tools
#+BEGIN_SRC emacs-lisp
	(use-package sr-speedbar
	  :config
	  (require 'sr-speedbar))
#+END_SRC
* Email
#+BEGIN_SRC emacs-lisp
  (unless (eq system-type 'windows-nt)
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
    (require 'mu4e)
    (setq mu4e-maildir (expand-file-name "~/Maildir"))
    (setq mu4e-drafts-folder "/[Gmail].Drafts")
    (setq mu4e-sent-folder "/[Gmail].Sent Mail")
    (setq mu4e-trash-folder  "/[Gmail].Trash")
    (setq mu4e-refile-folder "/[Gmail].Archive")

    ;; smtp mail setting - if you DON'T want to use nullmailer, instead
    ;; connecting to your smtp server and waiting...
    (setq
     message-send-mail-function 'smtpmail-send-it
     smtpmail-starttls-credentials
     '(("smtp.gmail.com" 587 raulschmidlin@gmail.com tmSaWi2010))
     smtpmail-stream-type 'starttls
     smtpmail-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 587

     ;; if you need offline mode, set these -- and create the queue dir
     ;; with 'mu mkdir', i.e.. mu mkdir /home/user/Maildir/queue
     smtpmail-queue-mail  nil
     smtpmail-queue-dir  "/home/user/Maildir/queue/cur")

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)
    ;; attachments go here
    (setq mu4e-attachment-dir  "~/Downloads")
    ;; don't save message to Sent Messages, IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)
    )
#+END_SRC
* Debuggers

#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
#+END_SRC
* Start server

#+BEGIN_SRC emacs-lisp
  (load "server")
  (when (and (>= emacs-major-version 23)
	   (equal window-system 'w32))
  (defun server-ensure-safe-dir (dir) "Noop" t)) ; Suppress error "directory
						 ; ~/.emacs.d/server is unsafe"
						 ; on windows.
  (unless (server-running-p) (server-start))
#+END_SRC
** Adapt for Emacs server
#+BEGIN_SRC emacs-lisp
  ;; Save the bookmark file every time the bookmark list changes
  (setq bookmark-save-flag 1)
#+END_SRC
* Analyze Emacs usage
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
	:init
	(keyfreq-mode 1)
	(keyfreq-autosave-mode 1))
#+END_SRC

* Hide minor-modes from mode-line
#+BEGIN_SRC emacs-lisp
  (delight 'which-key-mode nil t)
  (delight 'ivy-mode nil t)
  (delight 'subword-mode nil t)
  (delight 'visual-line-mode nil t)
  (delight 'aggressive-indent-mode nil t)
  (delight 'highlight-indent-guides-mode nil t)
  (delight 'hl-line-mode nil t)
  (delight 'symbol-overlay-mode nil t)
  (delight 'smartparens-mode nil t)
  (delight 'aggressive-fill-paragraph-mode nil t)
  (delight 'drag-stuff-mode nil t)
  (delight 'display-line-numbers-mode nil t)
  (delight 'linum-mode nil t)
  (delight 'tab-line-mode nil t)
  (delight 'pixel-scroll-mode nil t)
  (delight 'sublimity-mode nil t)
  (delight 'winner-mode nil t)
  (delight 'popwin-mode nil t)
  (delight 'show-paren-mode nil t)
  (delight 'flyspell-mode nil t)
  (delight 'company-mode nil t)
  (delight 'elisp-slime-nav-mode nil t)
#+END_SRC
