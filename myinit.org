* Use package
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

* Better defaults
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (show-paren-mode 1)
  ;(setq-default indent-tabs-mode nil)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain
        save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))

#+END_SRC

* Generic
#+BEGIN_SRC emacs-lisp
    (global-auto-revert-mode t)
    (toggle-debug-on-error)

    (global-linum-mode t)
    (setq inhibit-splash-screen t)
    (global-subword-mode t)

    (use-package visual-regexp
      :config
      (require 'visual-regexp))

    (use-package elscreen
      :bind ("C-t" . elscreen-clone)
      ("<C-next>". elscreen-next)
      ("<C-prior>" . elscreen-previous)
      ("C-w" . elscreen-kill)
      :config
      (elscreen-start))

    (use-package beacon)

  ;; Configure mouse to be more smooth
  (setq redisplay-dont-pause t
        scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)

  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))

    (add-to-list 'default-frame-alist '(font . "Source Code Pro-13"))
  (set-face-attribute 'default t :font "Source Code Pro-13")

  (add-hook 'buffer-list-update-hook (lambda () (auto-fill-mode t)))

#+END_SRC
* Input
#+BEGIN_SRC emacs-lisp
  (use-package ergoemacs-mode
    :init
    (setq ergoemacs-theme nil)
    (setq ergoemacs-keyboard-layout "de")
    :config
    (ergoemacs-mode 1))

  (global-set-key (kbd "M-3") 'delete-other-windows)
  (global-set-key (kbd "M-4") 'split-window-horizontally)
  (global-set-key (kbd "M-$") 'split-window-vertically)
  (global-set-key (kbd "C-S-f") 'swiper)

  ;; Help switching windows
  (use-package ace-window)
  (use-package multiple-cursors
    :bind ("C-d" . mc/mark-next-like-this))
  (use-package expand-region)
  (use-package powerline)

#+END_SRC

* Commands completion

#+BEGIN_SRC emacs-lisp
; Use which-key
(use-package which-key
  :config
  (which-key-mode))

; Helping IVY with Flx
(use-package flx)

; Include smex to sort recent commands first in counsel
(use-package smex)

; Use IVY
(use-package counsel
  :init
  (require 'smex)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq magit-completing-read-function 'ivy-completing-read)
  (setq projectile-completion-system 'ivy)
  (setq ivy-re-builders-alist			
		'((ivy-switch-buffer . ivy--regex-plus)
		  (swiper . ivy--regex-plus)
		  (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)
  :bind
  ("M-a" . counsel-M-x)
  :config
  (ivy-mode 1))
#+END_SRC
  
* C language

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "k&r"
        c-basic-offset 4
        default-tab-width 4
        ident-tabs-mode t)

  ;; Enable CMake major mode
  (use-package cmake-mode)

  (use-package cmake-font-lock
    :init
    (add-hook 'cmake-mode-hook 'cmake-font-lock-activate))
#+END_SRC

* Static code analysis
#+BEGIN_SRC emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

(use-package flycheck
  :config (global-flycheck-mode))

; Enable text completion
(use-package company
  :init
  (add-hook 'after-init-hook 'global-company-mode))

(use-package smartparens
  :config
  (smartparens-global-mode))

(global-set-key (kbd "C-i") 'imenu)
#+END_SRC

* Projects
#+BEGIN_SRC emacs-lisp
  ; Keybinding for using MaGit
  (use-package magit
    :bind ("C-x g" . magit-status))

  ; Projectile to access project files
  (use-package projectile
    :bind ("C-p" . projectile-find-file))
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (powerline-default-theme))
#+END_SRC

* Tools
#+BEGIN_SRC emacs-lisp
    (use-package sr-speedbar
      :bind ("C-b" . sr-speedbar-toggle)
      :config
      (require 'sr-speedbar))
#+END_SRC

* Debuggers

#+BEGIN_SRC emacs-lisp
(setq gdb-many-windows t)
(use-package realgud)
#+END_SRC

